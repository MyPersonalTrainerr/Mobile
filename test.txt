import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:my_personal_trainer/providers/exercises_provider.dart';
import 'package:my_personal_trainer/widgets/exercise_item_content.dart';
import 'package:provider/provider.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart' as syspaths;
import 'package:video_player/video_player.dart';
import 'package:flutter/foundation.dart';

class ExersiceDetailsScreen extends StatefulWidget {
  const ExersiceDetailsScreen({Key? key}) : super(key: key);
  static const routeName = '/exercise-details';

  @override
  State<ExersiceDetailsScreen> createState() => _ExersiceDetailsScreenState();
}

class _ExersiceDetailsScreenState extends State<ExersiceDetailsScreen> {
  // late VideoPlayerController _controller;

  // @override
  // void initState() {
  //   super.initState();
  //   Future.delayed(Duration.zero).then((_) {
  //     _controller = VideoPlayerController.file(widget.)
  //       ..initialize().then((_) {
  //         // Ensure the first frame is shown after the video is initialized, even before the play button has been pressed.
  //         setState(() {});
  //       });
  //   });
  // }

  void _onImageButtonPressed(ImageSource source,
      {BuildContext? context, bool isMultiImage = false}) async {
    if (_controller != null) {
      await _controller!.setVolume(0.0);
    }
    if (isVideo) {
      final XFile? file = await _picker.pickVideo(
          source: source, maxDuration: const Duration(seconds: 10));
      await _playVideo(file);
    }
    // else if (isMultiImage) {
    //   await _displayPickImageDialog(context!,
    //       (double? maxWidth, double? maxHeight, int? quality) async {
    //     try {
    //       final pickedFileList = await _picker.pickMultiImage(
    //         maxWidth: maxWidth,
    //         maxHeight: maxHeight,
    //         imageQuality: quality,
    //       );
    //       setState(() {
    //         _imageFileList = pickedFileList;
    //       });
    //     } catch (e) {
    //       setState(() {
    //         _pickImageError = e;
    //       });
    //     }
    //   });
    // }
    else {
      // await _displayPickImageDialog(context!,
      //     (double? maxWidth, double? maxHeight, int? quality) async {
      // try {
      //   final pickedFile = await _picker.pickImage(
      //     source: source,
      //     maxWidth: maxWidth,
      //     maxHeight: maxHeight,
      //     imageQuality: quality,
      //   );
      //   setState(() {
      //     _imageFile = pickedFile;
      //   });
      // } catch (e) {
      //   setState(() {
      //     _pickImageError = e;
      //   });
      // }
      // },
      // );
    }
  }

  bool isVideo = false;

  VideoPlayerController? _controller;
  VideoPlayerController? _toBeDisposed;
  String? _retrieveDataError;

  final ImagePicker _picker = ImagePicker();
  final TextEditingController maxWidthController = TextEditingController();
  final TextEditingController maxHeightController = TextEditingController();
  final TextEditingController qualityController = TextEditingController();

  Future<void> _playVideo(XFile? file) async {
    if (file != null && mounted) {
      await _disposeVideoController();
      late VideoPlayerController controller;
      if (kIsWeb) {
        controller = VideoPlayerController.network(file.path);
      } else {
        controller = VideoPlayerController.file(File(file.path));
      }
      _controller = controller;
      // In web, most browsers won't honor a programmatic call to .play
      // if the video has a sound track (and is not muted).
      // Mute the video so it auto-plays in web!
      // This is not needed if the call to .play is the result of user
      // interaction (clicking on a "play" button, for example).
      final double volume = kIsWeb ? 0.0 : 1.0;
      await controller.setVolume(volume);
      await controller.initialize();
      await controller.setLooping(true);
      await controller.play();
      setState(() {});
    }
  }

  @override
  void deactivate() {
    if (_controller != null) {
      _controller!.setVolume(0.0);
      _controller!.pause();
    }
    super.deactivate();
  }

  @override
  void dispose() {
    _disposeVideoController();
    maxWidthController.dispose();
    maxHeightController.dispose();
    qualityController.dispose();
    super.dispose();
  }

  Future<void> _disposeVideoController() async {
    if (_toBeDisposed != null) {
      await _toBeDisposed!.dispose();
    }
    _toBeDisposed = _controller;
    _controller = null;
  }

  Widget _previewVideo() {
    final Text? retrieveError = _getRetrieveErrorWidget();
    if (retrieveError != null) {
      return retrieveError;
    }
    if (_controller == null) {
      return const Text(
        'You have not yet picked a video',
        textAlign: TextAlign.center,
      );
    }
    return Padding(
      padding: const EdgeInsets.all(10.0),
      child: AspectRatioVideo(_controller),
    );
  }

  Text? _getRetrieveErrorWidget() {
    if (_retrieveDataError != null) {
      final Text result = Text(_retrieveDataError!);
      _retrieveDataError = null;
      return result;
    }
    return null;
  }

  Widget _handlePreview() {
    // if (isVideo) {
    return _previewVideo();
    // }
    // else {
    //   return _previewImages();
    // }
  }

  Future<void> retrieveLostData() async {
    final LostDataResponse response = await _picker.retrieveLostData();
    if (response.isEmpty) {
      return;
    }
    if (response.file != null) {
      if (response.type == RetrieveType.video) {
        isVideo = true;
        await _playVideo(response.file);
      }
      // else {
      //   isVideo = false;
      //   setState(() {
      //     _imageFile = response.file;
      //     _imageFileList = response.files;
      //   });
      // }
    } else {
      _retrieveDataError = response.exception!.code;
    }
  }

  Future<void> takePicture() async {
    final ImagePicker _picker = ImagePicker();
    final XFile? video = await _picker.pickVideo(
      source: ImageSource.camera,
      maxDuration: Duration(seconds: 3),
    );
    final File videoFile = File(video!.path);
    final appDirectory = await syspaths.getApplicationDocumentsDirectory();
    final videoName = path.basename(video.path);
    final savedVideo = await videoFile.copy('${appDirectory.path}/$videoName');
    // _controller = VideoPlayerController.file(savedVideo);
  }

  @override
  Widget build(BuildContext context) {
    final routeArgs = ModalRoute.of(context)!.settings.arguments;
    final exerciseId = routeArgs;

    final exercisesData =
        Provider.of<ExercisesProvider>(context, listen: false);
    final selectedExercise = exercisesData.findItemById(exerciseId as String);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Exercise Details',
        ),
      ),
      body: Column(
        children: <Widget>[
          ExerciseItemContent(selectedExercise),
          Padding(
            padding: const EdgeInsets.all(15.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: <Widget>[
                Text('Try Yourself'),
                Card(
                  elevation: 5,
                  child: IconButton(
                    onPressed: takePicture,
                    icon: Icon(Icons.video_camera_back_outlined),
                  ),
                ),
              ],
            ),
          ),
          Center(
            child: !kIsWeb && defaultTargetPlatform == TargetPlatform.android
                ? FutureBuilder<void>(
                    future: retrieveLostData(),
                    builder:
                        (BuildContext context, AsyncSnapshot<void> snapshot) {
                      switch (snapshot.connectionState) {
                        case ConnectionState.none:
                        case ConnectionState.waiting:
                          return const Text(
                            'You have not yet picked an image.',
                            textAlign: TextAlign.center,
                          );
                        case ConnectionState.done:
                          return _handlePreview();
                        default:
                          if (snapshot.hasError) {
                            return Text(
                              'Pick image/video error: ${snapshot.error}}',
                              textAlign: TextAlign.center,
                            );
                          } else {
                            return const Text(
                              'You have not yet picked an image.',
                              textAlign: TextAlign.center,
                            );
                          }
                      }
                    },
                  )
                : _handlePreview(),
          ),
          Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: <Widget>[
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: FloatingActionButton(
                  backgroundColor: Colors.red,
                  onPressed: () {
                    isVideo = true;
                    _onImageButtonPressed(ImageSource.gallery);
                  },
                  heroTag: 'video0',
                  tooltip: 'Pick Video from gallery',
                  child: const Icon(Icons.video_library),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: FloatingActionButton(
                  backgroundColor: Colors.red,
                  onPressed: () {
                    isVideo = true;
                    _onImageButtonPressed(ImageSource.camera);
                  },
                  heroTag: 'video1',
                  tooltip: 'Take a Video',
                  child: const Icon(Icons.videocam),
                ),
              ),

              // Center(
              //   child: _controller.value.isInitialized
              //       ? AspectRatio(
              //           aspectRatio: _controller.value.aspectRatio,
              //           child: VideoPlayer(_controller),
              //         )
              //       : Container(
              //           height: 200,
              //           width: 200,
              //         ),
              // ),
              // FloatingActionButton(
              //   onPressed: () {
              //     setState(() {
              //       _controller.value.isPlaying
              //           ? _controller.pause()
              //           : _controller.play();
              //     });
              //   },
              //   child: Icon(
              //     _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
              //   ),
              // ),
            ],
          ),
        ],
      ),
    );
  }

//   @override
//   void dispose() {
//     super.dispose();
//     _controller.dispose();
//   }
}

typedef void OnPickImageCallback(
    double? maxWidth, double? maxHeight, int? quality);

class AspectRatioVideo extends StatefulWidget {
  AspectRatioVideo(this.controller);

  final VideoPlayerController? controller;

  @override
  AspectRatioVideoState createState() => AspectRatioVideoState();
}

class AspectRatioVideoState extends State<AspectRatioVideo> {
  VideoPlayerController? get controller => widget.controller;
  bool initialized = false;

  void _onVideoControllerUpdate() {
    if (!mounted) {
      return;
    }
    if (initialized != controller!.value.isInitialized) {
      initialized = controller!.value.isInitialized;
      setState(() {});
    }
  }

  @override
  void initState() {
    super.initState();
    controller!.addListener(_onVideoControllerUpdate);
  }

  @override
  void dispose() {
    controller!.removeListener(_onVideoControllerUpdate);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (initialized) {
      return Center(
        child: AspectRatio(
          aspectRatio: controller!.value.aspectRatio,
          child: VideoPlayer(controller!),
        ),
      );
    } else {
      return Container();
    }
  }
}
